version: 2
jobs:
    build:
        docker:
            - image: circleci/openjdk:8-jdk-node-browsers
        working_directory: ~/repo
        environment:
            MAVEN_OPTS: -Xmx3200m
        steps:
            - checkout

            - restore_cache:
                keys:
                - v1-dependencies-{{ checksum "pom.xml" }}
                # fallback to using the latest cache if no exact match is found
                - v1-dependencies-

            - run: mvn dependency:go-offline

            - save_cache:
                paths:
                - ~/.m2
                key: v1-dependencies-{{ checksum "pom.xml" }}

            - run: mvn integration-test

            - restore_cache:
                keys:
                - v1-dependencies-{{ checksum "package.json" }}
                # fallback to using the latest cache if no exact match is found
                - v1-dependencies-

            - run: yarn install

            - save_cache:
                paths:
                - node_modules
                key: v1-dependencies-{{ checksum "package.json" }}

            - run: yarn test

    # Deploy to prod
    deploy:
        working_directory: ~/repo
        docker:
            - image: circleci/openjdk:8-jdk-node-browsers
        steps:
            - checkout
            - restore_cache:
                keys:
                - v1-dependencies-{{ checksum "pom.xml" }}
                # fallback to using the latest cache if no exact match is found
                - v1-dependencies-

            - run: mvn dependency:go-offline

            - save_cache:
                paths:
                - ~/.m2
                key: v1-dependencies-{{ checksum "pom.xml" }}

            - run: mvn -Pprod package
            - run: |
                set -xu
                mkdir -p /tmp/artifacts
                cp target/*.war /tmp/artifacts

            - store_artifacts:
                path: /tmp/artifacts
                destination: build-prod
workflows:
    version: 2
    build_and_deploy:
        jobs:
            - build:
                filters:
                    branches:
                        only:
                            - master
                            - staging
                            - development
            - deploy:
                requires:
                    - build
                filters:
                    branches:
                        only: development #testing on dev
                context: production
